"use strict";(self.webpackChunkopenyurt_io=self.webpackChunkopenyurt_io||[]).push([[3331],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),i=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=i(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),s=i(t),m=a,g=s["".concat(p,".").concat(m)]||s[m]||d[m]||o;return t?r.createElement(g,l(l({ref:n},c),{},{components:t})):r.createElement(g,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=s;var u={};for(var p in n)hasOwnProperty.call(n,p)&&(u[p]=n[p]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var i=2;i<o;i++)l[i]=t[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},46933:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>i});var r=t(87462),a=(t(67294),t(3905));const o={title:"\u4e91\u539f\u751f\u7ba1\u7406\u7aef\u8bbe\u5907"},l=void 0,u={unversionedId:"user-manuals/iot/edgex-foundry",id:"user-manuals/iot/edgex-foundry",title:"\u4e91\u539f\u751f\u7ba1\u7406\u7aef\u8bbe\u5907",description:"\u672c\u6587\u6863\u4e3b\u8981\u8bb2\u8ff0\u5982\u4f55\u5728\u5df2\u6709\u7684OpenYurt\u96c6\u7fa4\u4e0a\u5b89\u88c5Yurt-Device-Controller \u548c Yurt-EdgeX-Manager\u7ec4\u4ef6\uff0c\u5e76\u901a\u8fc7\u90e8\u7f72\u865a\u62df\u7aef\u8bbe\u5907\u6765\u5c55\u793a\u5982\u4f55\u901a\u8fc7\u4e91\u539f\u751f\u7684\u65b9\u5f0f\u7ba1\u7406\u8fb9\u7f18\u7aef\u8bbe\u5907\u3002",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/user-manuals/iot/edgex-foundry.md",sourceDirName:"user-manuals/iot",slug:"/user-manuals/iot/edgex-foundry",permalink:"/zh/docs/next/user-manuals/iot/edgex-foundry",draft:!1,editUrl:"https://github.com/openyurtio/openyurt.io/edit/master/docs/user-manuals/iot/edgex-foundry.md",tags:[],version:"current",lastUpdatedBy:"fsl",lastUpdatedAt:1677484328,formattedLastUpdatedAt:"2023\u5e742\u670827\u65e5",frontMatter:{title:"\u4e91\u539f\u751f\u7ba1\u7406\u7aef\u8bbe\u5907"},sidebar:"docs",previous:{title:"Prometheus\u6536\u96c6\u8fb9\u7f18\u8bbe\u5907\u6570\u636e",permalink:"/zh/docs/next/user-manuals/monitoring/prometheus"},next:{title:"YurtHub Performance Test",permalink:"/zh/docs/next/test-report/yurthub-performance-test"}},p={},i=[],c={toc:i};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u672c\u6587\u6863\u4e3b\u8981\u8bb2\u8ff0\u5982\u4f55\u5728\u5df2\u6709\u7684OpenYurt\u96c6\u7fa4\u4e0a\u5b89\u88c5Yurt-Device-Controller \u548c Yurt-EdgeX-Manager\u7ec4\u4ef6\uff0c\u5e76\u901a\u8fc7\u90e8\u7f72\u865a\u62df\u7aef\u8bbe\u5907\u6765\u5c55\u793a\u5982\u4f55\u901a\u8fc7\u4e91\u539f\u751f\u7684\u65b9\u5f0f\u7ba1\u7406\u8fb9\u7f18\u7aef\u8bbe\u5907\u3002"),(0,a.kt)("p",null,"\u5bf9\u4e8e\u6709\u5174\u8da3\u7684\u8bfb\u8005\uff0c\u53ef\u4ee5\u53bb\u76f8\u5173\u7684github\u4ed3\u5e93\u53c2\u8003\u672c\u6587\u4f7f\u7528\u7ec4\u4ef6\u7684\u5177\u4f53\u5b9e\u73b0\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openyurtio/yurt-device-controller"},"Yurt-Device-Controller"),"\n\u548c ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openyurtio/yurt-edgex-manager"},"Yurt-EdgeX-Manager")),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u8fd8\u6ca1\u6709OpenYurt\u96c6\u7fa4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openyurtio/openyurt/blob/master/docs/tutorial/yurtctl.md"},"yurtctl\u5de5\u5177"),"\n\u6765\u521d\u59cb\u5316\u4e00\u4e2aOpenYurt\u96c6\u7fa4\u6216\u5c06\u4e00\u4e2aKubernetes\u96c6\u7fa4\u8f6c\u6362\u4e3aOpenYurt\u96c6\u7fa4\u3002"),(0,a.kt)("h1",{id:"\u73af\u5883\u8981\u6c42"},"\u73af\u5883\u8981\u6c42"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"OpenYurt v0.5.0+")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u5b89\u88c5\u4e86 ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openyurtio/yurt-app-manager"},"Yurt-app-manager")," \u7ec4\u4ef6")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u4e0emaster\u4e0d\u5728\u540c\u4e00\u5c40\u57df\u7f51\u4e0b\u7684\u8282\u70b9\u90fd\u9700\u8981\u90e8\u7f72coreDNS pod")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u5c06\u8bbf\u95eecoreDNS service\u7684\u6d41\u91cf\u6539\u4e3a\u8282\u70b9\u6c60\u5185\u95ed\u73af\uff0c\u53c2\u8003",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openyurtio/openyurt/blob/master/docs/tutorial/service-topology.md"},"\u6559\u7a0b")))),(0,a.kt)("h1",{id:"1-\u5b89\u88c5yurt-edgex-manager\u5e76\u521b\u5efa\u4e00\u4e2aedgex\u5b9e\u4f8b"},"1. \u5b89\u88c5yurt-edgex-manager\u5e76\u521b\u5efa\u4e00\u4e2aEdgeX\u5b9e\u4f8b"),(0,a.kt)("p",null,"\u5b89\u88c5\u90e8\u7f72yurt-edgex-manager"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"# \u5982\u679c\u671f\u671b\u90e8\u7f72edgex\u7684\u8282\u70b9\u662farm64\u67b6\u6784\uff0c\u5219\u4f7f\u7528\u4ee5\u4e0b\u7684yaml\u6587\u4ef6\n# kubectl apply -f https://raw.githubusercontent.com/openyurtio/yurt-edgex-manager/main/Documentation/yurt-edgex-manager-arm64.yaml\n$ kubectl apply -f https://raw.githubusercontent.com/openyurtio/yurt-edgex-manager/main/Documentation/yurt-edgex-manager.yaml\n\n# \u68c0\u67e5\u72b6\u6001\n$ kubectl get pods -n edgex-system |grep edgex\nedgex-controller-manager-6c99fd9f9f-b9nnk   2/2     Running   0          6d22h\n")),(0,a.kt)("p",null,"\u521b\u5efa\u4e00\u4e2ahangzhou\u8fb9\u7f18\u8282\u70b9\u6c60\uff0c\u5e76\u5c06\u8fb9\u7f18\u8282\u70b9\u52a0\u5165\u5230hangzhou\u8282\u70b9\u6c60"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},'$ export WORKER_NODEPOOL="hangzhou"\n$ export EDGE_NODE="node1"\n\n# \u521b\u5efahangzhou\u8282\u70b9\u6c60\n$ cat <<EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1alpha1\nkind: NodePool\nmetadata:\n  name: $WORKER_NODEPOOL\nspec:\n  type: Edge\nEOF\n\n# \u5c06\u8fb9\u7f18\u8282\u70b9\u52a0\u5165hangzhou\u8282\u70b9\u6c60\n$ kubectl label node $EDGE_NODE apps.openyurt.io/desired-nodepool=hangzhou\n\n# \u68c0\u67e5\u8282\u70b9\u6c60\u72b6\u6001\n$ kubectl get nodepool\nNAME      TYPE   READYNODES   NOTREADYNODES   AGE\nhangzhou   Edge   0            1               6d22h\n')),(0,a.kt)("p",null,"\u5728hangzhou\u8282\u70b9\u6c60\u4e2d\u521b\u5efaedgex foundry\u5b9e\u4f8b\uff0c\u5e76\u5728edgex\u4e2d\u90e8\u7f72\u865a\u62df\u8bbe\u5907edgex-device-virtual"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},'$ export WORKER_NODEPOOL="hangzhou"\n# \u5982\u679c\u90e8\u7f72\u8282\u70b9\u662farm64\uff0c\u5219\u6539\u4e3a"edgexfoundry/docker-device-virtual-go-arm64:1.3.0"\n$ export VIRTUAL_DEVICE_IMAGE="edgexfoundry/docker-device-virtual-go:1.3.0"\n\n$ cat <<EOF | kubectl apply -f -\napiVersion: device.openyurt.io/v1alpha1\nkind: EdgeX\nmetadata:\n  name: edgex-sample-$WORKER_NODEPOOL\nspec:\n  version: hanoi\n  poolname: $WORKER_NODEPOOL\n  additionalServices:\n  - metadata:\n      name: edgex-device-virtual\n    spec:\n      type: NodePort\n      selector:\n        app: edgex-device-virtual\n      ports:\n      - name: http\n        port: 49990\n        protocol: TCP\n        targetPort: 49990\n        nodePort: 30090\n  additionalDeployments:\n  - metadata:\n      name: edgex-device-virtual\n    spec:\n      selector:\n        matchLabels:\n          app: edgex-device-virtual\n      template:\n        metadata:\n          labels:\n            app: edgex-device-virtual\n        spec:\n          hostname: edgex-device-virtual\n          containers:\n          - name: edgex-device-virtual\n            image: $VIRTUAL_DEVICE_IMAGE\n            imagePullPolicy: IfNotPresent\n            ports:\n            - name: http\n              protocol: TCP\n              containerPort: 49990\n            envFrom:\n            - configMapRef:\n                name: common-variables\n            env:\n              - name: Service_Host\n                value: "edgex-device-virtual"\nEOF\n')),(0,a.kt)("p",null,"\u68c0\u67e5edgex-foundry\u7684\u90e8\u7f72\u72b6\u6001"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"$ kubectl get edgex\nNAME                    READY   SERVICE   READYSERVICE   DEPLOYMENT   READYDEPLOYMENT\nedgex-sample-hangzhou   true    9         9              9            9\n")),(0,a.kt)("h1",{id:"2-\u5b89\u88c5\u5e76\u90e8\u7f72yurt-device-controller"},"2. \u5b89\u88c5\u5e76\u90e8\u7f72yurt-device-controller"),(0,a.kt)("p",null,"\u5b89\u88c5yurt-device-controller \u76f8\u5173\u7684CRD"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"$ kubectl apply -f https://raw.githubusercontent.com/openyurtio/yurt-device-controller/main/config/setup/crd.yaml\n")),(0,a.kt)("p",null,"\u4f7f\u7528YurtAppSet\u5728hanghzou\u8282\u70b9\u6c60\u4e2d\u90e8\u7f72\u4e00\u4e2ayurt-device-controller\u5b9e\u4f8b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},'$ export WORKER_NODEPOOL="hangzhou"\n$ cat <<EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1alpha1\nkind: YurtAppSet\nmetadata:\n  labels:\n    controller-tools.k8s.io: "1.0"\n  name: yurt-device-controller\nspec:\n  selector:\n    matchLabels:\n      app: yurt-device-controller\n  workloadTemplate:\n    deploymentTemplate:\n      metadata:\n        labels:\n          app: yurt-device-controller\n      spec:\n        template:\n          metadata:\n            labels:\n              app: yurt-device-controller\n              control-plane: controller-manager\n          spec:\n            containers:\n            - args:\n              - --health-probe-bind-address=:8081\n              - --metrics-bind-address=127.0.0.1:8080\n              - --leader-elect=false\n              command:\n              - /yurt-device-controller\n              image: openyurt/yurt-device-controller:latest\n              imagePullPolicy: IfNotPresent\n              livenessProbe:\n                httpGet:\n                  path: /healthz\n                  port: 8081\n                initialDelaySeconds: 15\n                periodSeconds: 20\n              name: manager\n              readinessProbe:\n                httpGet:\n                  path: /readyz\n                  port: 8081\n                initialDelaySeconds: 5\n                periodSeconds: 10\n              resources:\n                limits:\n                  cpu: 100m\n                  memory: 30Mi\n                requests:\n                  cpu: 100m\n                  memory: 20Mi\n              securityContext:\n                allowPrivilegeEscalation: false\n            securityContext:\n              runAsUser: 65532\n            terminationGracePeriodSeconds: 10\n  topology:\n    pools:\n    - name: $WORKER_NODEPOOL\n      nodeSelectorTerm:\n        matchExpressions:\n        - key: apps.openyurt.io/nodepool\n          operator: In\n          values:\n          - $WORKER_NODEPOOL\n      replicas: 1\n      tolerations:\n      - effect: NoSchedule\n        key: apps.openyurt.io/example\n        operator: Exists\n  revisionHistoryLimit: 5\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: default-cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: ""\n---\nEOF\n')),(0,a.kt)("p",null,"\u68c0\u67e5yurt-device-controller\u662f\u5426\u90e8\u7f72\u6210\u529f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"$ kubectl get pod |grep yurt-device-controller\nyurt-device-controller-beijing-sf7xz-79c9cbf4b7-mbfds             1/1     Running   0          6d22h\n")),(0,a.kt)("h1",{id:"3-\u67e5\u770b\u540c\u6b65\u4e0a\u6765\u8bbe\u5907\u76f8\u5173\u4fe1\u606f"},"3. \u67e5\u770b\u540c\u6b65\u4e0a\u6765\u8bbe\u5907\u76f8\u5173\u4fe1\u606f"),(0,a.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u540c\u6b65\u4e0a\u6765\u8bbe\u5907\u76f8\u5173\u4fe1\u606f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"$ kubectl get device\n$ kubectl get deviceservice\n$ kubectl get deviceprofile\n")),(0,a.kt)("h1",{id:"4-\u5378\u8f7d\u76f8\u5173\u7ec4\u4ef6\u5e76\u6e05\u7406\u73af\u5883"},"4. \u5378\u8f7d\u76f8\u5173\u7ec4\u4ef6\u5e76\u6e05\u7406\u73af\u5883"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},'$ export WORKER_NODEPOOL="hangzhou"\n$ export EDGE_NODE="node1"\n\n# 1.1 \u5220\u9664\u6240\u6709device, deviceservice, deviceprofile\u8d44\u6e90\n$ kubectl delete device --all\n$ kubectl delete deviceprofile --all\n$ kubectl delete deviceservice --all\n\n# 1.2 \u5220\u9664\u90e8\u7f72\u7684yurt-device-controller\n$ kubectl delete yurtappset yurt-device-controller\n$ kubectl delete clusterrolebinding default-cluster-admin\n\n# 1.3 \u5220\u9664device, deviceservice, deviceprofile\u8d44\u6e90\u76f8\u5173\u7684crd\n$ kubectl delete -f https://raw.githubusercontent.com/openyurtio/yurt-device-controller/main/config/setup/crd.yaml\n\n# 2.1 \u5220\u9664\u6240\u6709edgex\u5b9e\u4f8b\n$ kubectl delete edgex --all\n\n# 2.2 \u5378\u8f7dyurt-edgex-manager\n# \u5982\u679c\u4f7f\u7528\u7684arm64\u7248\u672c\u7684\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\n# kubectl delete -f https://raw.githubusercontent.com/openyurtio/yurt-edgex-manager/main/Documentation/yurt-edgex-manager-arm64.yaml\n$ kubectl delete -f https://raw.githubusercontent.com/openyurtio/yurt-edgex-manager/main/Documentation/yurt-edgex-manager.yaml\n\n# \uff08\u4ee5\u4e0b\u6b65\u9aa4\u53ef\u9009\uff09\n# 3.1 \u5c06\u8fb9\u7f18\u8282\u70b9\u79fb\u9664hangzhou\u8282\u70b9\u6c60\n$ kubectl label node $EDGE_NODE apps.openyurt.io/desired-nodepool-\n# 3.2 \u5220\u9664hangzhou\u8282\u70b9\u6c60\n$ kubectl delete nodepool $WORKER_NODEPOOL\n')))}d.isMDXComponent=!0}}]);