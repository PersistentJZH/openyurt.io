"use strict";(self.webpackChunkopenyurt_io=self.webpackChunkopenyurt_io||[]).push([[3974],{3905:(e,n,o)=>{o.d(n,{Zo:()=>p,kt:()=>u});var t=o(67294);function a(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){a(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var d=t.createContext({}),m=function(e){var n=t.useContext(d),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},p=function(e){var n=m(e.components);return t.createElement(d.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var o=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(o),u=a,g=c["".concat(d,".").concat(u)]||c[u]||s[u]||r;return o?t.createElement(g,i(i({ref:n},p),{},{components:o})):t.createElement(g,i({ref:n},p))}));function u(e,n){var o=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=c;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var m=2;m<r;m++)i[m]=o[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}c.displayName="MDXCreateElement"},98076:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var t=o(87462),a=(o(67294),o(3905));const r={title:"EdgeX Foundry"},i=void 0,l={unversionedId:"user-manuals/iot/edgex-foundry",id:"user-manuals/iot/edgex-foundry",title:"EdgeX Foundry",description:"This document mainly describes how to deploy the EdgeX system and YurtIoTDock component on an existing OpenYurt cluster using PlatformAdmin.",source:"@site/docs/user-manuals/iot/edgex-foundry.md",sourceDirName:"user-manuals/iot",slug:"/user-manuals/iot/edgex-foundry",permalink:"/docs/next/user-manuals/iot/edgex-foundry",draft:!1,editUrl:"https://github.com/openyurtio/openyurt.io/edit/master/docs/user-manuals/iot/edgex-foundry.md",tags:[],version:"current",lastUpdatedBy:"chenlong",lastUpdatedAt:1694421390,formattedLastUpdatedAt:"Sep 11, 2023",frontMatter:{title:"EdgeX Foundry"},sidebar:"docs",previous:{title:"prometheus",permalink:"/docs/next/user-manuals/monitoring/prometheus"},next:{title:"YurtHub Performance Test",permalink:"/docs/next/test-report/yurthub-performance-test"}},d={},m=[{value:"Environment",id:"environment",level:2},{value:"Device platform management",id:"device-platform-management",level:2},{value:"1. Create Node Pool",id:"1-create-node-pool",level:3},{value:"2. Create the IoT system PlatformAdmin within the node pool",id:"2-create-the-iot-system-platformadmin-within-the-node-pool",level:3},{value:"3. Deploy optional components",id:"3-deploy-optional-components",level:3},{value:"4. Modify component configuration",id:"4-modify-component-configuration",level:3},{value:"5. Add components manually",id:"5-add-components-manually",level:3},{value:"Configure PlatformAdmin",id:"configure-platformadmin",level:4},{value:"Edit PlatformAdminFramework",id:"edit-platformadminframework",level:4},{value:"End device management",id:"end-device-management",level:2}],p={toc:m};function s(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,t.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This document mainly describes how to deploy the EdgeX system and YurtIoTDock component on an existing OpenYurt cluster using PlatformAdmin."),(0,a.kt)("p",null,"In OpenYurt v1.4, we have upgraded the original yurt-edgex-manager and yurt-device-controller components. The former is now built-in within yurt-manager, allowing users to create PlatformAdmin resources by writing YAML files. With just a few lines of configuration, a complete EdgeX system can be built within the node pool. The latter has been renamed as yurt-iot-dock and will be automatically deployed to the edge side when PlatformAdmin is created. This facilitates the one-click management of edge devices for users."),(0,a.kt)("p",null,"If you don't have an OpenYurt cluster yet, you can use the yurtadm tool to initialize an OpenYurt cluster or convert an existing Kubernetes cluster into an OpenYurt cluster."),(0,a.kt)("h2",{id:"environment"},"Environment"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"OpenYurt v1.4.0+"),(0,a.kt)("li",{parentName:"ul"},"You should first install ",(0,a.kt)("inlineCode",{parentName:"li"},"yurt-manager")),(0,a.kt)("li",{parentName:"ul"},"Nodes outside the same local network as the master node need to deploy a coreDNS pod."),(0,a.kt)("li",{parentName:"ul"},"Set ServiceTopology to ",(0,a.kt)("inlineCode",{parentName:"li"},"kubernetes.io/hostname")," for CoreDNS service. For details, please refer to ",(0,a.kt)("a",{parentName:"li",href:"https://openyurt.io/docs/user-manuals/network/service-topology"},"ServiceTopology"))),(0,a.kt)("h2",{id:"device-platform-management"},"Device platform management"),(0,a.kt)("h3",{id:"1-create-node-pool"},"1. Create Node Pool"),(0,a.kt)("p",null,'First, create two nodepools: one is a cloud nodepool named "beijing", and the other is an edge nodepool named "hangzhou".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Create beijing nodepool\ncat << EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1beta1\nkind: NodePool\nmetadata:\n  name: beijing\nspec:\n  type: Cloud\nEOF\n\n# Create hangzhou nodepool\ncat << EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1beta1\nkind: NodePool\nmetadata:\n  name: hangzhou\nspec:\n  type: Edge\nEOF\n")),(0,a.kt)("p",null,'Next, add the specified nodes to their respective node pools. Label the node "openyurt-worker" as a cloud node, and label the node "openyurt-worker2" as an edge node.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# Mark "openyurt-worker" as a cloud node\nkubectl label node openyurt-worker apps.openyurt.io/nodepool=beijing\n# Mark "openyurt-worker2" as an edge node\nkubectl label node openyurt-worker2 apps.openyurt.io/nodepool=hangzhou\n')),(0,a.kt)("p",null,"Finally, check the status of the nodepools to ensure they are in a healthy state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Check the status of the nodepools\nkubectl get np\nNAME       TYPE    READYNODES   NOTREADYNODES   AGE\nbeijing    Cloud   1            0               4d18h\nhangzhou   Edge    1            0               4d18h\n")),(0,a.kt)("h3",{id:"2-create-the-iot-system-platformadmin-within-the-node-pool"},"2. Create the IoT system PlatformAdmin within the node pool"),(0,a.kt)("p",null,'Configure the use of the EdgeX version and select to create it within the "hangzhou" nodepool.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# Create an EdgeX deployment of the "Minnesota" version within the "hangzhou" node pool\ncat <<EOF | kubectl apply -f -\napiVersion: iot.openyurt.io/v1alpha2\nkind: PlatformAdmin\nmetadata:\n  name: edgex-sample\nspec:\n  version: minnesota\n  poolName: hangzhou\nEOF\n\n# Verify the deployment status to ensure everything is set up correctly\nkubectl get po\nNAME                                                              READY   STATUS    RESTARTS   AGE\nedgex-core-command-hangzhou-4j6pz-8668ff94d7-hqw2r                1/1     Running   0          61s\nedgex-core-common-config-bootstrapper-hangzhou-jnw2q-57bd99xr9p   1/1     Running   0          61s\nedgex-core-consul-hangzhou-6p9tj-798489c647-6xz4m                 1/1     Running   0          61s\nedgex-core-metadata-hangzhou-6l7v5-6f964fc4f-67f9p                1/1     Running   0          61s\nedgex-redis-hangzhou-cwgsw-5c7d7fc478-fsgp9                       1/1     Running   0          61s\n')),(0,a.kt)("h3",{id:"3-deploy-optional-components"},"3. Deploy optional components"),(0,a.kt)("p",null,'In the current version (v1.4.0) of PlatformAdmin, you can use the "components" field to deploy optional components with a single command. Below is an example of deploying "yurt-iot-dock," "edgex-device-virtual," and "edgex-device-rest" using the "components" field:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# Add the "components" field on top of the previously deployed PlatformAdmin\ncat <<EOF | kubectl apply -f -\napiVersion: iot.openyurt.io/v1alpha2\nkind: PlatformAdmin\nmetadata:\n  name: edgex-sample\nspec:\n  version: minnesota\n  poolName: hangzhou\n  components:\n  - name: yurt-iot-dock\n  - name: edgex-device-virtual\n  - name: edgex-device-rest\nEOF\n\n# You can see that the optional components have been deployed\nkubectl get po\nNAME                                                              READY   STATUS    RESTARTS   AGE\nedgex-core-command-hangzhou-cwgs2-77bb5d9cdd-zp89r                1/1     Running   0          20m\nedgex-core-common-config-bootstrapper-hangzhou-bqhnb-57bd9c4q5q   1/1     Running   0          20m\nedgex-core-consul-hangzhou-5rl7c-66dbc9c7d7-dqvm8                 1/1     Running   0          20m\nedgex-core-metadata-hangzhou-srpff-dd6c6f9cb-2cj9k                1/1     Running   0          20m\nedgex-device-rest-hangzhou-v7p99-7b8bb4f5d4-kz8sq                 1/1     Running   0          7m49s\nedgex-device-virtual-hangzhou-ssz59-796f948c69-5k4tc              1/1     Running   0          7m49s\nedgex-redis-hangzhou-bk5g5-5fbdf6fffb-cmf6d                       1/1     Running   0          20m\nyurt-iot-dock-hangzhou-56f98-8549f848f5-v2pjn                     1/1     Running   0          7m49s\n')),(0,a.kt)("h3",{id:"4-modify-component-configuration"},"4. Modify component configuration"),(0,a.kt)("p",null,'PlatformAdmin provides advanced users with an entry point for custom configurations. All configurations of PlatformAdmin are controlled by a configmap named "platformadmin-framework". By modifying the values of this configmap, users can modify the configuration of each component. Here is an example of the "platformadmin-framework" configmap:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\ndata:\n  framework: |\n    components:\n    - deployment:\n        selector:\n          matchLabels:\n            app: edgex-core-command\n        strategy: {}\n        template:\n          metadata:\n            creationTimestamp: null\n            labels:\n              app: edgex-core-command\n          spec:\n            containers:\n            - env:\n              - name: SERVICE_HOST\n                value: edgex-core-command\n              - name: EXTERNALMQTT_URL\n                value: tcp://edgex-mqtt-broker:1883\n              envFrom:\n              - configMapRef:\n                  name: common-variables\n              image: openyurt/core-command:3.0.0\n              imagePullPolicy: IfNotPresent\n              name: edgex-core-command\n              ports:\n              - containerPort: 59882\n                name: tcp-59882\n                protocol: TCP\n              resources: {}\n            hostname: edgex-core-command\n      name: edgex-core-command\n      service:\n        ports:\n        - name: tcp-59882\n          port: 59882\n          protocol: TCP\n          targetPort: 59882\n        selector:\n          app: edgex-core-command\n...\n")),(0,a.kt)("h3",{id:"5-add-components-manually"},"5. Add components manually"),(0,a.kt)("p",null,"Considering that some users may need to add their own custom components or modify existing components, the component mechanism of PlatformAdmin also supports adding new components. To add a new component, please follow these steps:"),(0,a.kt)("h4",{id:"configure-platformadmin"},"Configure PlatformAdmin"),(0,a.kt)("p",null,'Add the name of the component you want to add to the "components" field in PlatformAdmin. For example, if we want to add a component named "nginx-demo."'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Add nginx-demo in components\ncat <<EOF | kubectl apply -f -\napiVersion: iot.openyurt.io/v1alpha2\nkind: PlatformAdmin\nmetadata:\n  name: edgex-sample\nspec:\n  version: minnesota\n  poolName: hangzhou\n  components:\n  - name: yurt-iot-dock\n  - name: edgex-device-virtual\n  - name: edgex-device-rest\n  - name: nginx-demo\nEOF\n")),(0,a.kt)("h4",{id:"edit-platformadminframework"},"Edit PlatformAdminFramework"),(0,a.kt)("p",null,'Since the AutoCollector does not collect a standard configuration file for the "nginx-demo" component, there is no corresponding configuration in the platformadmin-framework. In this case, users can manually add this component.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# Modify the contents of the configmap using kubectl edit\nkubectl edit cm platformadmin-framework\n\n# Added deployment and service for nginx-demo\napiVersion: v1\ndata:\n  framework: |\n    components:\n    - deployment:\n        selector:\n          matchLabels:\n            app: nginx-demo\n        strategy: {}\n        template:\n          metadata:\n            creationTimestamp: null\n            labels:\n              app: nginx-demo\n          spec:\n            containers:\n            - image: nginx\n              imagePullPolicy: IfNotPresent\n              name: nginx-demo\n              ports:\n              - containerPort: 80\n                name: nginx\n                protocol: TCP\n              resources: {}\n            hostname: nginx-demo\n      name: nginx-demo\n      service:\n        ports:\n        - name: nginx\n          port: 80\n          protocol: TCP\n          targetPort: 80\n        selector:\n          app: nginx-demo\n...\n")),(0,a.kt)("h2",{id:"end-device-management"},"End device management"),(0,a.kt)("p",null," TODO: Introduce the end device management function of yurt-iot-dock"))}s.isMDXComponent=!0}}]);