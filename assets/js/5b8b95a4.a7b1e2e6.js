"use strict";(self.webpackChunkopenyurt_io=self.webpackChunkopenyurt_io||[]).push([[3974],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=o.createContext({}),c=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(d.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,h=p["".concat(d,".").concat(m)]||p[m]||s[m]||r;return t?o.createElement(h,i(i({ref:n},u),{},{components:t})):o.createElement(h,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=p;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},98076:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=t(87462),a=(t(67294),t(3905));const r={title:"EdgeX Foundry"},i=void 0,l={unversionedId:"user-manuals/iot/edgex-foundry",id:"user-manuals/iot/edgex-foundry",title:"EdgeX Foundry",description:"This document mainly describes how to deploy the EdgeX system and YurtIoTDock component on an existing OpenYurt cluster using PlatformAdmin.",source:"@site/docs/user-manuals/iot/edgex-foundry.md",sourceDirName:"user-manuals/iot",slug:"/user-manuals/iot/edgex-foundry",permalink:"/docs/next/user-manuals/iot/edgex-foundry",draft:!1,editUrl:"https://github.com/openyurtio/openyurt.io/edit/master/docs/user-manuals/iot/edgex-foundry.md",tags:[],version:"current",lastUpdatedBy:"\u6478\u9c7c\u55b5",lastUpdatedAt:1699411637,formattedLastUpdatedAt:"Nov 8, 2023",frontMatter:{title:"EdgeX Foundry"},sidebar:"docs",previous:{title:"prometheus",permalink:"/docs/next/user-manuals/monitoring/prometheus"},next:{title:"YurtHub Performance Test",permalink:"/docs/next/test-report/yurthub-performance-test"}},d={},c=[{value:"Environment",id:"environment",level:2},{value:"Install yurt-iot-dock environment",id:"install-yurt-iot-dock-environment",level:2},{value:"Device platform management",id:"device-platform-management",level:2},{value:"1. Create Node Pool",id:"1-create-node-pool",level:3},{value:"2. Create the IoT system PlatformAdmin within the node pool",id:"2-create-the-iot-system-platformadmin-within-the-node-pool",level:3},{value:"3. Deploy optional components",id:"3-deploy-optional-components",level:3},{value:"4. Modify component configuration",id:"4-modify-component-configuration",level:3},{value:"5. Add components manually",id:"5-add-components-manually",level:3},{value:"Configure PlatformAdmin",id:"configure-platformadmin",level:4},{value:"Edit PlatformAdminFramework",id:"edit-platformadminframework",level:4},{value:"End device management",id:"end-device-management",level:2},{value:"1. Add device-virtual components manually",id:"1-add-device-virtual-components-manually",level:3},{value:"2. Create Device, DeviceProfile",id:"2-create-device-deviceprofile",level:3},{value:"4. Retrieve device generated data",id:"4-retrieve-device-generated-data",level:3},{value:"5. Update the properties of device",id:"5-update-the-properties-of-device",level:3}],u={toc:c};function s(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This document mainly describes how to deploy the EdgeX system and YurtIoTDock component on an existing OpenYurt cluster using PlatformAdmin."),(0,a.kt)("p",null,"In OpenYurt v1.4, we have upgraded the original yurt-edgex-manager and yurt-device-controller components. The former is now built-in within yurt-manager, allowing users to create PlatformAdmin resources by writing YAML files. With just a few lines of configuration, a complete EdgeX system can be built within the node pool. The latter has been renamed as yurt-iot-dock and will be automatically deployed to the edge side when PlatformAdmin is created. This facilitates the one-click management of edge devices for users."),(0,a.kt)("p",null,"If you don't have an OpenYurt cluster yet, you can use the yurtadm tool to initialize an OpenYurt cluster or convert an existing Kubernetes cluster into an OpenYurt cluster."),(0,a.kt)("h2",{id:"environment"},"Environment"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"OpenYurt v1.4.0+"),(0,a.kt)("li",{parentName:"ul"},"You should first install ",(0,a.kt)("inlineCode",{parentName:"li"},"yurt-manager")),(0,a.kt)("li",{parentName:"ul"},"Nodes outside the same local network as the master node need to deploy a coreDNS pod."),(0,a.kt)("li",{parentName:"ul"},"Set ServiceTopology to ",(0,a.kt)("inlineCode",{parentName:"li"},"kubernetes.io/hostname")," for CoreDNS service. For details, please refer to ",(0,a.kt)("a",{parentName:"li",href:"https://openyurt.io/docs/user-manuals/network/service-topology"},"ServiceTopology"))),(0,a.kt)("h2",{id:"install-yurt-iot-dock-environment"},"Install yurt-iot-dock environment"),(0,a.kt)("p",null,"To deploy yurt-iot-dock using PlatformAdmin, you first need to install the helm chart for yurt-iot-dock into your Kubernetes cluster."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"helm install yurt-iot-dock ./charts/yurt-iot-dock\n")),(0,a.kt)("h2",{id:"device-platform-management"},"Device platform management"),(0,a.kt)("h3",{id:"1-create-node-pool"},"1. Create Node Pool"),(0,a.kt)("p",null,'First, create two nodepools: one is a cloud nodepool named "beijing", and the other is an edge nodepool named "hangzhou".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Create beijing nodepool\ncat << EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1beta1\nkind: NodePool\nmetadata:\n  name: beijing\nspec:\n  type: Cloud\nEOF\n\n# Create hangzhou nodepool\ncat << EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1beta1\nkind: NodePool\nmetadata:\n  name: hangzhou\nspec:\n  type: Edge\nEOF\n")),(0,a.kt)("p",null,'Next, add the specified nodes to their respective node pools. Label the node "openyurt-worker" as a cloud node, and label the node "openyurt-worker2" as an edge node.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# Mark "openyurt-worker" as a cloud node\nkubectl label node openyurt-worker apps.openyurt.io/nodepool=beijing\n# Mark "openyurt-worker2" as an edge node\nkubectl label node openyurt-worker2 apps.openyurt.io/nodepool=hangzhou\n')),(0,a.kt)("p",null,"Finally, check the status of the nodepools to ensure they are in a healthy state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Check the status of the nodepools\nkubectl get np\nNAME       TYPE    READYNODES   NOTREADYNODES   AGE\nbeijing    Cloud   1            0               4d18h\nhangzhou   Edge    1            0               4d18h\n")),(0,a.kt)("h3",{id:"2-create-the-iot-system-platformadmin-within-the-node-pool"},"2. Create the IoT system PlatformAdmin within the node pool"),(0,a.kt)("p",null,'Configure the use of the EdgeX version and select to create it within the "hangzhou" nodepool.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# Create an EdgeX deployment of the "Minnesota" version within the "hangzhou" node pool\ncat <<EOF | kubectl apply -f -\napiVersion: iot.openyurt.io/v1alpha2\nkind: PlatformAdmin\nmetadata:\n  name: edgex-sample\nspec:\n  version: minnesota\n  poolName: hangzhou\nEOF\n\n# Verify the deployment status to ensure everything is set up correctly\nkubectl get po\nNAME                                                              READY   STATUS    RESTARTS   AGE\nedgex-core-command-hangzhou-4j6pz-8668ff94d7-hqw2r                1/1     Running   0          61s\nedgex-core-common-config-bootstrapper-hangzhou-jnw2q-57bd99xr9p   1/1     Running   0          61s\nedgex-core-consul-hangzhou-6p9tj-798489c647-6xz4m                 1/1     Running   0          61s\nedgex-core-metadata-hangzhou-6l7v5-6f964fc4f-67f9p                1/1     Running   0          61s\nedgex-redis-hangzhou-cwgsw-5c7d7fc478-fsgp9                       1/1     Running   0          61s\n')),(0,a.kt)("h3",{id:"3-deploy-optional-components"},"3. Deploy optional components"),(0,a.kt)("p",null,'In the current version (v1.4.0) of PlatformAdmin, you can use the "components" field to deploy optional components with a single command. Below is an example of deploying "yurt-iot-dock," "edgex-device-virtual," and "edgex-device-rest" using the "components" field:'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/next/reference/iot/components"},"Components Documentation")," for component names for optional components.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'# Add the "components" field on top of the previously deployed PlatformAdmin\ncat <<EOF | kubectl apply -f -\napiVersion: iot.openyurt.io/v1alpha2\nkind: PlatformAdmin\nmetadata:\n  name: edgex-sample\nspec:\n  version: minnesota\n  poolName: hangzhou\n  components:\n  - name: yurt-iot-dock\n  - name: edgex-device-virtual\n  - name: edgex-device-rest\nEOF\n\n# You can see that the optional components have been deployed\nkubectl get po\nNAME                                                              READY   STATUS    RESTARTS   AGE\nedgex-core-command-hangzhou-cwgs2-77bb5d9cdd-zp89r                1/1     Running   0          20m\nedgex-core-common-config-bootstrapper-hangzhou-bqhnb-57bd9c4q5q   1/1     Running   0          20m\nedgex-core-consul-hangzhou-5rl7c-66dbc9c7d7-dqvm8                 1/1     Running   0          20m\nedgex-core-metadata-hangzhou-srpff-dd6c6f9cb-2cj9k                1/1     Running   0          20m\nedgex-device-rest-hangzhou-v7p99-7b8bb4f5d4-kz8sq                 1/1     Running   0          7m49s\nedgex-device-virtual-hangzhou-ssz59-796f948c69-5k4tc              1/1     Running   0          7m49s\nedgex-redis-hangzhou-bk5g5-5fbdf6fffb-cmf6d                       1/1     Running   0          20m\nyurt-iot-dock-hangzhou-56f98-8549f848f5-v2pjn                     1/1     Running   0          7m49s\n')),(0,a.kt)("h3",{id:"4-modify-component-configuration"},"4. Modify component configuration"),(0,a.kt)("p",null,'PlatformAdmin provides advanced users with an entry point for custom configurations. All configurations of PlatformAdmin are controlled by a configmap named "platformadmin-framework". By modifying the values of this configmap, users can modify the configuration of each component. Here is an example of the "platformadmin-framework" configmap:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\ndata:\n  framework: |\n    components:\n    - deployment:\n        selector:\n          matchLabels:\n            app: edgex-core-command\n        strategy: {}\n        template:\n          metadata:\n            creationTimestamp: null\n            labels:\n              app: edgex-core-command\n          spec:\n            containers:\n            - env:\n              - name: SERVICE_HOST\n                value: edgex-core-command\n              - name: EXTERNALMQTT_URL\n                value: tcp://edgex-mqtt-broker:1883\n              envFrom:\n              - configMapRef:\n                  name: common-variables\n              image: openyurt/core-command:3.0.0\n              imagePullPolicy: IfNotPresent\n              name: edgex-core-command\n              ports:\n              - containerPort: 59882\n                name: tcp-59882\n                protocol: TCP\n              resources: {}\n            hostname: edgex-core-command\n      name: edgex-core-command\n      service:\n        ports:\n        - name: tcp-59882\n          port: 59882\n          protocol: TCP\n          targetPort: 59882\n        selector:\n          app: edgex-core-command\n...\n")),(0,a.kt)("h3",{id:"5-add-components-manually"},"5. Add components manually"),(0,a.kt)("p",null,"Considering that some users may need to add their own custom components or modify existing components, the component mechanism of PlatformAdmin also supports adding new components. To add a new component, please follow these steps:"),(0,a.kt)("h4",{id:"configure-platformadmin"},"Configure PlatformAdmin"),(0,a.kt)("p",null,'Add the name of the component you want to add to the "components" field in PlatformAdmin. For example, if we want to add a component named "nginx-demo."'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Add nginx-demo in components\ncat <<EOF | kubectl apply -f -\napiVersion: iot.openyurt.io/v1alpha2\nkind: PlatformAdmin\nmetadata:\n  name: edgex-sample\nspec:\n  version: minnesota\n  poolName: hangzhou\n  components:\n  - name: yurt-iot-dock\n  - name: edgex-device-virtual\n  - name: edgex-device-rest\n  - name: nginx-demo\nEOF\n")),(0,a.kt)("h4",{id:"edit-platformadminframework"},"Edit PlatformAdminFramework"),(0,a.kt)("p",null,'Since the AutoCollector does not collect a standard configuration file for the "nginx-demo" component, there is no corresponding configuration in the platformadmin-framework. In this case, users can manually add this component.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# Modify the contents of the configmap using kubectl edit\nkubectl edit cm platformadmin-framework\n\n# Added deployment and service for nginx-demo\napiVersion: v1\ndata:\n  framework: |\n    components:\n    - deployment:\n        selector:\n          matchLabels:\n            app: nginx-demo\n        strategy: {}\n        template:\n          metadata:\n            creationTimestamp: null\n            labels:\n              app: nginx-demo\n          spec:\n            containers:\n            - image: nginx\n              imagePullPolicy: IfNotPresent\n              name: nginx-demo\n              ports:\n              - containerPort: 80\n                name: nginx\n                protocol: TCP\n              resources: {}\n            hostname: nginx-demo\n      name: nginx-demo\n      service:\n        ports:\n        - name: nginx\n          port: 80\n          protocol: TCP\n          targetPort: 80\n        selector:\n          app: nginx-demo\n...\n")),(0,a.kt)("h2",{id:"end-device-management"},"End device management"),(0,a.kt)("p",null,"Next, we introduce the end-device management function of yurt-iot-dock, using virtual devices as a case study."),(0,a.kt)("h3",{id:"1-add-device-virtual-components-manually"},"1. Add device-virtual components manually"),(0,a.kt)("p",null,"To make things easy, we just deploy a virtual device driver device-virtual-go."),(0,a.kt)("p",null,"It simulates different kinds of devices to generate device data, and users can send commands to get responses from or conduct control instructions to the devices."),(0,a.kt)("p",null,"First, we need to ensure that edgex-device-virtual is existing in the configmap of the PlatformAdmin framework:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# Get the contents of the configmap using kubectl edit\nkubectl get cm platformadmin-framework -o yaml\n\napiVersion: v1\ndata:\n  framework: |\n    components:\n    - deployment:\n        selector:\n          matchLabels:\n            app: edgex-device-virtual\n        strategy: {}\n        template:\n          metadata:\n            creationTimestamp: null\n            labels:\n              app: edgex-device-virtual\n          spec:\n            containers:\n            - env:\n              - name: SERVICE_HOST\n                value: edgex-device-virtual\n              envFrom:\n              - configMapRef:\n                  name: common-variables\n              image: openyurt/device-virtual:3.0.0\n              imagePullPolicy: IfNotPresent\n              name: edgex-device-virtual\n              ports:\n              - containerPort: 59900\n                name: tcp-59900\n                protocol: TCP\n              resources: {}\n            hostname: edgex-device-virtual\n      name: edgex-device-virtual\n      service:\n        ports:\n        - name: tcp-59900\n          port: 59900\n          protocol: TCP\n          targetPort: 59900\n        selector:\n          app: edgex-device-virtual\n...\n")),(0,a.kt)("p",null,"The device-virtual-go component automatically creates and registers the deviceservice, the 5 different types of devices and their deviceprofiles at startup, and the yurt-iot-dock component synchronizes them all to OpenYurt. So you can check it with kubectl:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"$ kubectl get deviceservice\nNAME                      NODEPOOL   SYNCED   AGE\nhangzhou-device-virtual   hangzhou   true     2d1h\n\n$ kubectl get device\nNAME                                     NODEPOOL   SYNCED   AGE\nhangzhou-random-binary-device            hangzhou   true     2d1h\nhangzhou-random-boolean-device           hangzhou   true     2d1h\nhangzhou-random-float-device             hangzhou   true     2d1h\nhangzhou-random-integer-device           hangzhou   true     2d1h\nhangzhou-random-unsignedinteger-device   hangzhou   true     2d1h\n\n$ kubectl get deviceprofile\nNAME                                     NODEPOOL   SYNCED   AGE\nhangzhou-random-binary-device            hangzhou   true     2d1h\nhangzhou-random-boolean-device           hangzhou   true     2d1h\nhangzhou-random-float-device             hangzhou   true     2d1h\nhangzhou-random-integer-device           hangzhou   true     2d1h\nhangzhou-random-unsignedinteger-device   hangzhou   true     2d1h\n")),(0,a.kt)("h3",{id:"2-create-device-deviceprofile"},"2. Create Device, DeviceProfile"),(0,a.kt)("p",null,"In addition to synchronizing devices, device profiles, and device services in edgex by means of preconfigured configurations, the Openyurt side also provides a more general way to create devices and deviceprofiles."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a DeviceProfile")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: iot.openyurt.io/v1alpha1\nkind: DeviceProfile\nmetadata:\n  name: openyurt-created-random-boolean-deviceprofile\nspec:\n  description: Example of Device-Virtual Created By OpenYurt\n  deviceCommands:\n  - isHidden: false\n    name: WriteBoolValue\n    readWrite: W\n    resourceOperations:\n    - defaultValue: ""\n      deviceResource: Bool\n    - defaultValue: "false"\n      deviceResource: EnableRandomization_Bool\n  - isHidden: false\n    name: WriteBoolArrayValue\n    readWrite: W\n    resourceOperations:\n    - defaultValue: ""\n      deviceResource: BoolArray\n    - defaultValue: "false"\n      deviceResource: EnableRandomization_BoolArray\n  deviceResources:\n  - description: used to decide whether to re-generate a random value\n    isHidden: true\n    name: EnableRandomization_Bool\n    properties:\n      defaultValue: "true"\n      readWrite: W\n      valueType: Bool\n  - description: Generate random boolean value\n    isHidden: false\n    name: Bool\n    properties:\n      defaultValue: "true"\n      readWrite: RW\n      valueType: Bool\n  - description: used to decide whether to re-generate a random value\n    isHidden: true\n    name: EnableRandomization_BoolArray\n    properties:\n      defaultValue: "true"\n      readWrite: W\n      valueType: Bool\n  - description: Generate random boolean array value\n    isHidden: false\n    name: BoolArray\n    properties:\n      defaultValue: \'[true]\'\n      readWrite: RW\n      valueType: BoolArray\n  labels:\n  - openyurt-created-device-virtual-example\n  manufacturer: OpenYurt Community\n  model: OpenYurt-Device-Virtual-01\n  nodePool: hangzhou\n')),(0,a.kt)("p",null,"This DeviceProfile is just a copy of random-boolean DeviceProfile created by device-virtual-go for demo purpose."),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Create a Device")),(0,a.kt)("p",null,"Create a virtual device using the pre-synchronized DeviceService and the DeviceProfile created above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: iot.openyurt.io/v1alpha1\nkind: Device\nmetadata:\n  name: openyurt-created-random-boolean-device\nspec:\n  adminState: UNLOCKED\n  description: Example of Device Virtual\n  labels:\n  - openyurt-created-device-virtual-example\n  managed: true\n  nodePool: hangzhou\n  notify: true\n  operatingState: UP\n  profileName: openyurt-created-random-boolean-deviceprofile\n  protocols:\n    other:\n      Address: openyurt-created-device-virtual-bool-01\n      Port: "300"\n  serviceName: device-virtual\n')),(0,a.kt)("p",null,"Then, we can see the resource objects in OpenYurt through kubectl as below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get deviceprofile openyurt-created-random-boolean-deviceprofile\nNAME                                            NODEPOOL   SYNCED   AGE\nopenyurt-created-random-boolean-deviceprofile   hangzhou   true     15h\n\n$ kubectl get device openyurt-created-random-boolean-device\nNAME                                     NODEPOOL   SYNCED   AGE\nopenyurt-created-random-boolean-device   hangzhou   true     14h\n")),(0,a.kt)("h3",{id:"4-retrieve-device-generated-data"},"4. Retrieve device generated data"),(0,a.kt)("p",null,"We have already set up the environment and simulated a virtual bool device."),(0,a.kt)("p",null,"In OpenYurt, we can easily get the latest data generated by devices just by checking the status sub-resource of Device resource object like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ kubectl get device openyurt-created-random-boolean-device -o yaml\napiVersion: iot.openyurt.io/v1alpha1\nkind: Device\nmetadata:\n  annotations:\n    kubectl.kubernetes.io/last-applied-configuration: |\n      {"apiVersion":"iot.openyurt.io/v1alpha1","kind":"Device","metadata":{"annotations":{},"name":"openyurt-boolean-device","namespace":"default"},"spec":{"adminState":"UNLOCKED","description":"Example of Device Virtual","labels":["openyurt-device-boolean-virtual"],"managed":true,"nodePool":"hangzhou","notify":true,"operatingState":"UP","profileName":"Random-Boolean-Device","protocols":{"other":{"Address":"openyurt-device-boolean-virtual-01","Port":"301"}},"serviceName":"openyurt-boolean-device"}}\n  creationTimestamp: "2023-09-14T06:25:10Z"\n  finalizers:\n  - iot.openyurt.io/device\n  generation: 2\n  name: openyurt-boolean-device\n  namespace: default\n  resourceVersion: "1717015"\n  uid: 6677eb4a-b644-4d5d-970a-1446f141a353\nspec:\n  adminState: UNLOCKED\n  description: Example of Device Virtual\n  deviceProperties:\n    Bool:\n      desiredValue: "true"\n      name: Bool\n  labels:\n  - openyurt-created-device-virtual-example\n  managed: false\n  nodePool: hangzhou\n  notify: true\n  operatingState: UP\n  profileName: openyurt-created-random-boolean-deviceprofile\n  protocols:\n    other:\n      Address: openyurt-created-device-virtual-bool-01\n      Port: "300"\n  serviceName: device-virtual\nstatus:\n  adminState: UNLOCKED\n  deviceProperties:\n    Bool:\n      actualValue: "true"\n      getURL: http://edgex-core-command:59882/api/v3/device/name/openyurt-boolean-device/Bool\n      name: Bool\n    BoolArray:\n      actualValue: \'[true, true, true, false, false]\'\n      getURL: http://edgex-core-command:59882/api/v3/device/name/openyurt-boolean-device/BoolArray\n      name: BoolArray\n  edgeId: 5e63effd-deeb-4505-890e-17ec32f02511\n  operatingState: UP\n  synced: true\n\n')),(0,a.kt)("p",null,"The deviceProperties shows all the properties of this device."),(0,a.kt)("p",null,"For example, the Bool property has the latest value false and the value is retrieved from the EdgeX rest api ",(0,a.kt)("a",{parentName:"p",href:"http://edgex-core-command:59882/api/v2/device/name/openyurt-created-random-boolean-device/Bool"},"http://edgex-core-command:59882/api/v2/device/name/openyurt-created-random-boolean-device/Bool"),"."),(0,a.kt)("h3",{id:"5-update-the-properties-of-device"},"5. Update the properties of device"),(0,a.kt)("p",null,"If you want to control the device by updating its writable attributes, you should first set the Device.Spec.Managed field to true to indicate that yurt-iot-dock takes over the device, otherwise all update operations will be ignored."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Set the managed field of device to true")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'kubectl patch device openyurt-created-random-boolean-device -p \'{"spec":{"managed":true}}\'  --type=merge\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Change the adminState of device")),(0,a.kt)("p",null,"The administrative state (aka admin state) provides control of the device service by man or other systems. It can be set to LOCKED or UNLOCKED. When a device service is set to locked, it is not supposed to respond to any command requests nor send data from the devices."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'kubectl patch device openyurt-created-random-boolean-device -p \'{"spec":{"adminState":"UNLOCKED"}}\'  --type=merge\n')),(0,a.kt)("p",null,"Set the DeviceProperties to control/update device"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'kubectl patch device openyurt-created-random-boolean-device --type=merge -p \'{"spec":{"managed":true,"deviceProperties":{"Bool": {"name":"Bool", "desiredValue":"false"}}}}\'\n')),(0,a.kt)("p",null,"In the command, we set the Bool DeviceProperty value to false, yurt-iot-dock will trigger a EdgeX command and change the property of the device. We can check this by watch the status of device for multiple times, you will find the value is always false unless you change this property to true again."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"watch \"kubectl get device openyurt-created-random-boolean-device -o json | jq '.status.deviceProperties.Bool.actualValue'\"\n\n# output\nEvery 2.0s: kubectl get device openyurt-boolean-device -o json | jq '.status.deviceProperties.Bool.actualValue'                                VM-16-6-ubuntu: Sat Sep 16 16:39:58 2023\n\n\"false\"\n\n")))}s.isMDXComponent=!0}}]);