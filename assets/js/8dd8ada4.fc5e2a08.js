"use strict";(self.webpackChunkopenyurt_io=self.webpackChunkopenyurt_io||[]).push([[3766],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),y=c(n),f=o,m=y["".concat(p,".").concat(f)]||y[f]||u[f]||a;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=y;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},98698:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c}});var r=n(87462),o=(n(67294),n(3905));const a={slug:"How-to-use-service-topology",title:"Use service topology to realize topology-aware traffic routing",authors:["windydayc"],tags:["openyurt"]},i=void 0,l={permalink:"/blog/How-to-use-service-topology",editUrl:"https://github.com/openyurtio/openyurt.io/tree/master/blog/blog/2021-11-24-How-to-use-service-topology.md",source:"@site/blog/2021-11-24-How-to-use-service-topology.md",title:"Use service topology to realize topology-aware traffic routing",description:"Service Topology enables a service to route traffic based on the Node topology of the cluster. For example, a service can specify that traffic be preferentially routed to endpoints that are on the same Node as the client, or in the same available NodePool.",date:"2021-11-24T00:00:00.000Z",formattedDate:"November 24, 2021",tags:[{label:"openyurt",permalink:"/blog/tags/openyurt"}],readingTime:5.41,hasTruncateMarker:!0,authors:[{name:"Feng Zeng",title:"Zhejiang University student, Member of OpenYurt",url:"https://github.com/windydayc",imageURL:"https://github.com/windydayc.png",key:"windydayc"}],frontMatter:{slug:"How-to-use-service-topology",title:"Use service topology to realize topology-aware traffic routing",authors:["windydayc"],tags:["openyurt"]},prevItem:{title:"Seamless conversion between Kubernetes and OpenYurt",permalink:"/blog/How-to-use-yurtctl-convert-revert"},nextItem:{title:"How Openyurt runs the business pod in edge scenarios",permalink:"/blog/How-run-business-pod-in-edge-scenarios"}},p={authorsImageUrls:[void 0]},c=[],s={toc:c};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Service Topology")," enables a service to route traffic based on the Node topology of the cluster. For example, a service can specify that traffic be preferentially routed to endpoints that are on the same Node as the client, or in the same available NodePool. "),(0,o.kt)("p",null,"The following picture shows the general function of the ",(0,o.kt)("em",{parentName:"p"},"service topology"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"service-topology",src:n(30030).Z,width:"1167",height:"529"})),(0,o.kt)("p",null,"To use ",(0,o.kt)("em",{parentName:"p"},"service topology"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"EndpointSliceProxying")," ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/"},"feature gate")," must be enabled, and kube-proxy needs to be configured to connect to Yurthub instead of the API server."),(0,o.kt)("p",null,"You can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"topologyKeys")," values of a service to direct traffic as follows. If ",(0,o.kt)("inlineCode",{parentName:"p"},"topologyKeys")," is not specified or empty, no topology constraints will be applied."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"th"},"annotation Key")),(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"th"},"annotation Value")),(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"th"},"explain")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"openyurt.io/topologyKeys"),(0,o.kt)("td",{parentName:"tr",align:"center"},"kubernetes.io/hostname"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Only to endpoints on the same node.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"openyurt.io/topologyKeys"),(0,o.kt)("td",{parentName:"tr",align:"center"},"kubernetes.io/zone",(0,o.kt)("br",null)," or ",(0,o.kt)("br",null),"openyurt.io/nodepool"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Only to endpoints on the same nodepool.")))))}u.isMDXComponent=!0},30030:function(e,t,n){t.Z=n.p+"assets/images/service-topology-example-60b16f131cb1d5e4fbdd797a79200a83.png"}}]);