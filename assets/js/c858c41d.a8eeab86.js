"use strict";(self.webpackChunkopenyurt_io=self.webpackChunkopenyurt_io||[]).push([[3389],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=o,f=p["".concat(i,".").concat(h)]||p[h]||u[h]||a;return n?r.createElement(f,c(c({ref:t},d),{},{components:n})):r.createElement(f,c({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},80275:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={title:"coredns"},c=void 0,s={unversionedId:"faq/coredns",id:"faq/coredns",title:"coredns",description:"1. In the edge node pool, cross-node Pods can be accessed through PodIP, but cannot be accessed through service",source:"@site/docs/faq/coredns.md",sourceDirName:"faq",slug:"/faq/coredns",permalink:"/docs/next/faq/coredns",draft:!1,editUrl:"https://github.com/openyurtio/openyurt.io/edit/master/docs/faq/coredns.md",tags:[],version:"current",lastUpdatedBy:"rambohe-ch",lastUpdatedAt:1679553864,formattedLastUpdatedAt:"Mar 23, 2023",frontMatter:{title:"coredns"},sidebar:"docs",previous:{title:"yurt-tunnel",permalink:"/docs/next/faq/yurt-tunnel"},next:{title:"prometheus",permalink:"/docs/next/faq/prometheus"}},i={},l=[],d={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," 1. In the edge node pool, cross-node Pods can be accessed through PodIP, but cannot be accessed through service")),(0,o.kt)("p",null,"First, it can be accessed through podIP, indicating that the cross-node container network (such as vxlan of flannel) is normal, and then the service cannot be accessed, which can be analyzed as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In the net namespace of the pod, whether to directly access the service clusterIP is reachable"),(0,o.kt)("li",{parentName:"ul"},"If it is unreachable, it means that kube-proxy may have a problem with the configuration of the backend instance of the service. Generally, it is a problem with the service topology. You can refer to the problem for analysis ",(0,o.kt)("a",{parentName:"li",href:"/docs/next/faq/yurthub"},"On the edge node, the service topology capability does not take effect")),(0,o.kt)("li",{parentName:"ul"},"If it is reachable through service clusterIP, it means domain name resolution problem. then we can check the dns problem.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Enter the net and mount namespace of the pod, check the contents of the /etc/resolv.conf file, and see the address of the dns nameserver, which is usually the clusterIP of the kube-dns service"),(0,o.kt)("li",{parentName:"ol"},"Execute the command: dig @{dns nameserver} {service name}, and check whether a resolution result can be returned or not."),(0,o.kt)("li",{parentName:"ol"},"Execute the command: dig @{CoreDNS pod ip} {service name}, and check whether a resolution result can be returned or not."),(0,o.kt)("li",{parentName:"ol"},"If ",(0,o.kt)("inlineCode",{parentName:"li"},"dns nameserver")," can not work but ",(0,o.kt)("inlineCode",{parentName:"li"},"CoreDNS pod ip")," can work, this means that traffic of kube-dns service can not be forwarded to the accessible CoreDNS pod instances. maybe service topology routing selection of kubed-dns service does not take effect, you can refer to the Yurthub problem ",(0,o.kt)("a",{parentName:"li",href:"/docs/next/faq/yurthub"},"On the edge node, the Service topology capability does not take effect"))))))}u.isMDXComponent=!0}}]);